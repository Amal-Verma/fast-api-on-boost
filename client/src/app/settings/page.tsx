'use client';

import { useState } from 'react';
import { useTheme } from '../../context/ThemeContext';
import Sidebar from '../../components/layout/Sidebar';
import DashboardHeader from '../../components/dashboard/DashboardHeader';
import { Button } from '../../components/ui/Button';
import { FiSave, FiRefreshCw } from 'react-icons/fi';

export default function SettingsPage() {
  const { theme, toggleTheme } = useTheme();
  const [settings, setSettings] = useState({
    authEnabled: false,
    apiKey: 'sk_test_yourapikey12345',
    graphqlEnabled: false,
    autoGenerateDoc: true,
    maxRequestsPerMin: 60,
    logRequests: true,
    cacheEnabled: false,
    cacheDuration: 300,
  });
  
  const handleToggleSetting = (key) => {
    setSettings({
      ...settings,
      [key]: !settings[key],
    });
  };
  
  const handleInputChange = (key, value) => {
    setSettings({
      ...settings,
      [key]: value,
    });
  };
  
  const handleSaveSettings = () => {
    // Mock saving settings
    console.log('Saving settings:', settings);
    alert('Settings saved successfully!');
  };
  
  return (
    <div className={`flex h-screen ${theme === 'dark' ? 'bg-gray-900 text-white' : 'bg-gray-50 text-gray-900'}`}>
      <Sidebar />
      <main className="flex-1 p-6 overflow-auto">
        <DashboardHeader />
        
        <div className="mb-8">
          <h1 className="text-3xl font-bold">Settings</h1>
          <p className="text-gray-500 dark:text-gray-400 mt-2">
            Configure your API Builder preferences and global settings.
          </p>
        </div>
        
        <div className="bg-white dark:bg-gray-800 rounded-lg shadow overflow-hidden">
          <div className="p-6 space-y-8">
            {/* Authentication Settings */}
            <div className="space-y-4">
              <h2 className="text-xl font-semibold">Authentication & Security</h2>
              
              <div className="flex items-center justify-between p-4 bg-gray-50 dark:bg-gray-700 rounded-lg">
                <div>
                  <h3 className="font-medium">Enable Authentication</h3>
                  <p className="text-sm text-gray-500 dark:text-gray-400">
                    Require authentication for all API endpoints
                  </p>
                </div>
                <label className="relative inline-flex items-center cursor-pointer">
                  <input 
                    type="checkbox" 
                    className="sr-only peer" 
                    checked={settings.authEnabled}
                    onChange={() => handleToggleSetting('authEnabled')}
                  />
                  <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 dark:peer-focus:ring-blue-800 rounded-full peer dark:bg-gray-700 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-blue-600"></div>
                </label>
              </div>
              
              <div className="p-4 bg-gray-50 dark:bg-gray-700 rounded-lg">
                <h3 className="font-medium mb-2">API Key</h3>
                <div className="flex">
                  <input
                    type="text"
                    value={settings.apiKey}
                    onChange={(e) => handleInputChange('apiKey', e.target.value)}
                    className="flex-1 p-2 border border-gray-300 rounded-l-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-600 dark:border-gray-600 dark:text-white"
                  />
                  <button className="bg-gray-200 dark:bg-gray-600 p-2 rounded-r-md">
                    <FiRefreshCw />
                  </button>
                </div>
              </div>
            </div>
            
            {/* API Settings */}
            <div className="space-y-4">
              <h2 className="text-xl font-semibold">API Behavior</h2>
              
              <div className="flex items-center justify-between p-4 bg-gray-50 dark:bg-gray-700 rounded-lg">
                <div>
                  <h3 className="font-medium">Enable GraphQL Support</h3>
                  <p className="text-sm text-gray-500 dark:text-gray-400">
                    Generate GraphQL endpoints alongside REST APIs
                  </p>
                </div>
                <label className="relative inline-flex items-center cursor-pointer">
                  <input 
                    type="checkbox" 
                    className="sr-only peer" 
                    checked={settings.graphqlEnabled}
                    onChange={() => handleToggleSetting('graphqlEnabled')}
                  />
                  <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 dark:peer-focus:ring-blue-800 rounded-full peer dark:bg-gray-700 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-blue-600"></div>
                </label>
              </div>
              
              <div className="flex items-center justify-between p-4 bg-gray-50 dark:bg-gray-700 rounded-lg">
                <div>
                  <h3 className="font-medium">Auto-generate API Documentation</h3>
                  <p className="text-sm text-gray-500 dark:text-gray-400">
                    Automatically create OpenAPI documentation for all endpoints
                  </p>
                </div>
                <label className="relative inline-flex items-center cursor-pointer">
                  <input 
                    type="checkbox" 
                    className="sr-only peer" 
                    checked={settings.autoGenerateDoc}
                    onChange={() => handleToggleSetting('autoGenerateDoc')}
                  />
                  <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 dark:peer-focus:ring-blue-800 rounded-full peer dark:bg-gray-700 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-blue-600"></div>
                </label>
              </div>
              
              <div className="p-4 bg-gray-50 dark:bg-gray-700 rounded-lg">
                <h3 className="font-medium mb-2">Rate Limiting (requests per minute)</h3>
                <input
                  type="number"
                  min="1"
                  max="1000"
                  value={settings.maxRequestsPerMin}
                  onChange={(e) => handleInputChange('maxRequestsPerMin', parseInt(e.target.value))}
                  className="w-full p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-600 dark:border-gray-600 dark:text-white"
                />
              </div>
            </div>
            
            {/* Performance Settings */}
            <div className="space-y-4">
              <h2 className="text-xl font-semibold">Performance & Logging</h2>
              
              <div className="flex items-center justify-between p-4 bg-gray-50 dark:bg-gray-700 rounded-lg">
                <div>
                  <h3 className="font-medium">Log API Requests</h3>
                  <p className="text-sm text-gray-500 dark:text-gray-400">
                    Keep a log of all API requests for monitoring
                  </p>
                </div>
                <label className="relative inline-flex items-center cursor-pointer">
                  <input 
                    type="checkbox" 
                    className="sr-only peer" 
                    checked={settings.logRequests}
                    onChange={() => handleToggleSetting('logRequests')}
                  />
                  <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 dark:peer-focus:ring-blue-800 rounded-full peer dark:bg-gray-700 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-blue-600"></div>
                </label>
              </div>
              
              <div className="space-y-3 p-4 bg-gray-50 dark:bg-gray-700 rounded-lg">
                <div className="flex items-center justify-between">
                  <div>
                    <h3 className="font-medium">Enable Response Caching</h3>
                    <p className="text-sm text-gray-500 dark:text-gray-400">
                      Cache API responses to improve performance
                    </p>
                  </div>
                  <label className="relative inline-flex items-center cursor-pointer">
                    <input 
                      type="checkbox" 
                      className="sr-only peer" 
                      checked={settings.cacheEnabled}
                      onChange={() => handleToggleSetting('cacheEnabled')}
                    />
                    <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 dark:peer-focus:ring-blue-800 rounded-full peer dark:bg-gray-700 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-blue-600"></div>
                  </label>
                </div>
                
                {settings.cacheEnabled && (
                  <div>
                    <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                      Cache Duration (seconds)
                    </label>
                    <input
                      type="number"
                      min="10"
                      max="3600"
                      value={settings.cacheDuration}
                      onChange={(e) => handleInputChange('cacheDuration', parseInt(e.target.value))}
                      className="w-full p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-600 dark:border-gray-600 dark:text-white"
                    />
                  </div>
                )}
              </div>
            </div>
            
            {/* Save Button */}
            <div className="pt-4 border-t border-gray-200 dark:border-gray-700">
              <Button
                variant="primary"
                size="lg"
                className="flex items-center"
                onClick={handleSaveSettings}
              >
                <FiSave className="mr-2" />
                Save Settings
              </Button>
            </div>
          </div>
        </div>
      </main>
    </div>
  );
}
